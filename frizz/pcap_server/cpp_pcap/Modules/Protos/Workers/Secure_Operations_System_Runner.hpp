/*
# ................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
# : 
# : 
# : 
# : _____/\\\\\\\\\\\___________________________________________________________________________/\\\\\\\\\\\_________________________________________________________________________________________________________/\\\\\\\\\\\\_________________________________________________/\\\\\\_______________________________________________________________________________________________        
# : ___/\\\/////////\\\_______________________________________________________________________/\\\/////////\\\______________________________________________________________________________________________________\/\\\////////\\\______________________________________________\////\\\_______________________________________________________________________________________________       
# : __\//\\\______\///_______________________________________________________________________\//\\\______\///____________________________________________________________/\\\_____/\\\_________/\\\__/\\\___________\/\\\______\//\\\________________________________________________\/\\\____________________/\\\\\\\\\_______________________________________________________/\\\______      
# :   ___\////\\\_____________/\\\\\\\\__/\\\\\\\\\_____/\\/\\\\\\\______/\\\\\\\\______________\////\\\_____________/\\\\\\\\______/\\\\\\\\__/\\\____/\\\__/\\/\\\\\\\__\///___/\\\\\\\\\\\___\//\\\/\\\____________\/\\\_______\/\\\_____/\\\\\\\\___/\\\____/\\\_____/\\\\\\\\_____\/\\\________/\\\\\_____/\\\/////\\\____/\\\\\__/\\\\\_______/\\\\\\\\___/\\/\\\\\\____/\\\\\\\\\\\_     
# :    ______\////\\\________/\\\//////__\////////\\\___\/\\\/////\\\___/\\\/////\\\________________\////\\\________/\\\/////\\\___/\\\//////__\/\\\___\/\\\_\/\\\/////\\\__/\\\_\////\\\////_____\//\\\\\_____________\/\\\_______\/\\\___/\\\/////\\\_\//\\\__/\\\____/\\\/////\\\____\/\\\______/\\\///\\\__\/\\\\\\\\\\___/\\\///\\\\\///\\\___/\\\/////\\\_\/\\\////\\\__\////\\\////__    
# :     _________\////\\\____/\\\___________/\\\\\\\\\\__\/\\\___\///___/\\\\\\\\\\\____________________\////\\\____/\\\\\\\\\\\___/\\\_________\/\\\___\/\\\_\/\\\___\///__\/\\\____\/\\\__________\//\\\______________\/\\\_______\/\\\__/\\\\\\\\\\\___\//\\\/\\\____/\\\\\\\\\\\_____\/\\\_____/\\\__\//\\\_\/\\\//////___\/\\\_\//\\\__\/\\\__/\\\\\\\\\\\__\/\\\__\//\\\____\/\\\______   
# :      __/\\\______\//\\\__\//\\\_________/\\\/////\\\__\/\\\_________\//\\///////______________/\\\______\//\\\__\//\\///////___\//\\\________\/\\\___\/\\\_\/\\\_________\/\\\____\/\\\_/\\___/\\_/\\\_______________\/\\\_______/\\\__\//\\///////_____\//\\\\\____\//\\///////______\/\\\____\//\\\__/\\\__\/\\\_________\/\\\__\/\\\__\/\\\_\//\\///////___\/\\\___\/\\\____\/\\\_/\\__  
# :      _\///\\\\\\\\\\\/____\///\\\\\\\\_\//\\\\\\\\/\\_\/\\\__________\//\\\\\\\\\\___________\///\\\\\\\\\\\/____\//\\\\\\\\\\__\///\\\\\\\\_\//\\\\\\\\\__\/\\\_________\/\\\____\//\\\\\___\//\\\\/________________\/\\\\\\\\\\\\/____\//\\\\\\\\\\____\//\\\______\//\\\\\\\\\\__/\\\\\\\\\__\///\\\\\/___\/\\\_________\/\\\__\/\\\__\/\\\__\//\\\\\\\\\\_\/\\\___\/\\\____\//\\\\\___ 
# :       ___\///////////________\////////___\////////\//__\///____________\//////////______________\///////////_______\//////////_____\////////___\/////////___\///__________\///______\/////_____\////__________________\////////////_______\//////////______\///________\//////////__\/////////_____\/////_____\///__________\///___\///___\///____\//////////__\///____\///______\/////____
# :
# : This code belongs to the scare security organization. This code you may use and may re distribute as this is a open source project as a base for modern day applications which need simple local HTTP routing
# :
# : Please make sure before distributing code is not directly pasted and this code is taken into affect, modified, remade, re named, re created, re modified and other forms of manipulation are required
# : 
# : If you do not modify make sure to give credits to the contributors and the security organization that developed this code, This code is also a re made version of someone elses amazing project found that was written for older versions of C++ but was also re declared. Re implementation of secure and advanced command execution using standard C++, No logging or output for this code base, this is a rewrite of Raymiorg's resulter written using the tabnine AI https://github.com/RaymiiOrg/cpp-command-output/blob/master/command.h
# : 
# :                                                 https://github.com/Scare-Security
# : 
# :...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................
*/
#pragma once 
#include <array>
#include <ostream>
#include <string>
#include <cstdio>
#include <iostream>
#include "Secure_Operations_Argument_Checker.hpp"


namespace ExecutionEngine {
    struct Res {
        std::string o;
        int es;
        friend std::ostream & operator<<(std::ostream &ostreamer, const Res &streamer) {
            return ostreamer;
        }
        bool operator==(const Res &other) const {
            return o == other.o && es == other.es;
        }
        bool operator!=(const Res &other) const {
            return!(*this == other);
        }
    };
    class Execution {
        public:
            static Res EngineExec(const std::string &command) {
                int e_code = 0;
                std::array<char, 8192> buf{};
                std::string result;
                #ifdef _WIN32
                    #define popen _popen
                    #define pclose _pclose
                    #define WEXITSTATUS
                #endif
                FILE *pipe = popen(command.c_str(), "r");
                if (pipe == nullptr) {
                     throw std::runtime_error("popen() failed!");
                }
                try {
                    std::size_t br;
                    while (
                            (
                                br = std::fread(
                                                buf.data(), sizeof(
                                                                    buf.at(0)
                                                                ), sizeof(
                                                                            buf
                                                                        ), pipe
                                                                                    )
                                                                                        ) != 0) {
                                                                                                result += std::string(buf.data(), br);
                }
                } catch(...) {
                    pclose(pipe);
                    throw;
                }
                int res = pclose(pipe);
                e_code = WEXITSTATUS(res);
                return Res {
                    result,
                    e_code
                };
            }
    };
};